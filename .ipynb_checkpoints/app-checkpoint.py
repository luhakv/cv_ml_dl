{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import lightfm as lf\n",
    "import nmslib\n",
    "import pickle\n",
    "import scipy.sparse as sparse\n",
    "\n",
    "def nearest_books_nms(book_id, index, n=10):\n",
    "    \"\"\"Функция для поиска ближайших соседей, возвращает построенный индекс\"\"\"\n",
    "    nn = index.knnQuery(item_embeddings[book_id], k=n)\n",
    "    return nn\n",
    "\n",
    "def get_names(index):\n",
    "    \"\"\"\n",
    "    input - idx of books\n",
    "    Функция для возвращения имени книг\n",
    "    return - list of names\n",
    "    \"\"\"\n",
    "    names = []\n",
    "    for idx in index:\n",
    "        names.append('Book name:  {} '.format(\n",
    "            name_mapper[idx]) + '  Book Author: {}'.format(author_mapper[idx]))\n",
    "    return names\n",
    "\n",
    "def read_files(folder_name='data'):\n",
    "    \"\"\"\n",
    "    Функция для чтения файлов + преобразование к  нижнему регистру\n",
    "    \"\"\"\n",
    "    ratings = pd.read_csv(folder_name+'/ratings.csv')\n",
    "    books = pd.read_csv(folder_name+'/books.csv')\n",
    "    books['title'] = books.title.str.lower()\n",
    "    return ratings, books \n",
    "\n",
    "def make_mappers():\n",
    "    \"\"\"\n",
    "    Функция для создания отображения id в title\n",
    "    \"\"\"\n",
    "    name_mapper = dict(zip(books.id, books.title))\n",
    "    author_mapper = dict(zip(books.id, books.authors))\n",
    "\n",
    "    return name_mapper, author_mapper\n",
    "\n",
    "def load_embeddings():\n",
    "    \"\"\"\n",
    "    Функция для загрузки векторных представлений\n",
    "    \"\"\"\n",
    "    with open('item_embeddings.pickle', 'rb') as f:\n",
    "        item_embeddings = pickle.load(f)\n",
    "\n",
    "    # Тут мы используем nmslib, чтобы создать наш быстрый knn\n",
    "    nms_idx = nmslib.init(method='hnsw', space='cosinesimil')\n",
    "    nms_idx.addDataPointBatch(item_embeddings)\n",
    "    nms_idx.createIndex(print_progress=True)\n",
    "    return item_embeddings,nms_idx\n",
    "\n",
    "#Загружаем данные\n",
    "ratings, books  = read_files(folder_name='data') \n",
    "name_mapper, author_mapper = make_mappers()\n",
    "item_embeddings,nms_idx = load_embeddings()\n",
    "\n",
    "#Форма для ввода текста\n",
    "title = st.text_input('Book Name', '')\n",
    "title = title.lower()\n",
    "\n",
    "#Наш поиск по книгам\n",
    "output = books[books.title.str.contains(title) > 0]\n",
    "\n",
    "#Выбор книги из списка\n",
    "option = st.selectbox('Which book?', output['title'].values)\n",
    "\n",
    "#Выводим книгу\n",
    "'You selected: ', option\n",
    "\n",
    "#Ищем рекомендации\n",
    "val_index = output[output['title'].values == option].id\n",
    "index = nearest_books_nms(val_index, nms_idx, 5)\n",
    "\n",
    "#Выводим рекомендации к ней\n",
    "'Most similar books are: '\n",
    "st.write('', get_names(index[0])[1:])\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
